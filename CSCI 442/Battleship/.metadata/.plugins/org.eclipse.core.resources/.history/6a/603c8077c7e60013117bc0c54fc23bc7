package battleship;

public class GameThread extends Thread {

	private Player player1;
	private Player player2;
	private boolean gameRunning = true;
	private Player actionPlayer = null;
	private Player waitPlayer = null;
	
	public GameThread(Player player1, Player player2){
		this.player1 = player1;
		player1.setGame(this);
		this.player2 = player2;
		player2.setGame(this);
	}
	
	
	public void attackEnemy(Player attacker, Point attackPoint){
		Player enemy = (attacker == player1)?player2:player1;
		Ship hitShip = null;
		String shipMessage;
		if (enemy.checkHit(attackPoint)){ //See hit/miss
			hitShip = enemy.takeHit(attackPoint);
			if (hitShip != null){ //If it hit and sank the ship
				shipMessage = "Sink: "+ hitShip.getName()+" ; "+attackPoint.toString();
			}
			else{
				shipMessage = "Hit: "+attackPoint.toString();
			}
		}
		else{
			shipMessage = "Miss: "+attackPoint.toString();
		}
	}
	
	public void killGame(String reason){
		System.out.println("Disconnect kiled game");
		if (!player1.disconnected){
			player1.sendMessage("disconnect");
		}
		if (!player2.disconnected){
			player2.sendMessage("disconnect");
		}
		this.interrupt();
	}
	
	@Override
	public void run() {
		player1.sendMessage("place");
		player2.sendMessage("place");
		while (!player1.allPlaced || !player2.allPlaced){//Wait for placing
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				System.out.println(e.getMessage());
			}
		} 
		actionPlayer = player1;
		waitPlayer = player2;
		while(gameRunning){
			actionPlayer.sendMessage("go");
			waitPlayer.sendMessage("enemyturn");
			while(!actionPlayer.moved){ //Wait for player to move
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					System.out.println(e.getMessage());
				}
			}
		}
	}
}
