/*
 * Zach Evans
 * CSCI 442
 * Spring 2014
 * Assignment 5
 * 
 * This program searches through an XML file containing class data for 
 * WWU classes and finds time conflicts, printing out relevant information.
 */

import org.jdom2.input.SAXBuilder;
import org.jdom2.input.sax.XMLReaderSchemaFactory;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.xml.sax.SAXException;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.io.*;
import java.util.*;

import javax.xml.XMLConstants;
import javax.xml.validation.*;


public class ClassConflicts {
	private static SAXBuilder builder = new SAXBuilder();
	private static File coursesFile = new File("WWU_courses.xml");
	private static Hashtable<String, ArrayList<Element>> coursesByRoom = new Hashtable<String, ArrayList<Element>>();
	public static void main(String[] args) {
		try {
			SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.XML_DTD_NS_URI);
			Schema validateSchema = schemaFactory.newSchema(new File("WWU_courses.dtd"));
			XMLReaderSchemaFactory validateFactory = new XMLReaderSchemaFactory(validateSchema);
			builder.setXMLReaderFactory(validateFactory);
			Document courseDOM = (Document)builder.build(coursesFile);
			Element rootNode = courseDOM.getRootElement();
			
			
			for (Element course: rootNode.getChildren("course")){
				for (Element section: course.getChildren("section")){
					String sectionRoom = section.getAttributeValue("room");
					if(coursesByRoom.containsKey(sectionRoom)){
						coursesByRoom.get(sectionRoom).add(section);
					}
					else{
						ArrayList<Element> newRoomArray = new ArrayList<Element>();
						newRoomArray.add(section);
						coursesByRoom.put(sectionRoom, newRoomArray);
					}
				}
			}
			for (String room : coursesByRoom.keySet()){
				ArrayList<Element> sectionList = coursesByRoom.get(room);
				SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm a");
				Collections.sort(sectionList, new sectionComparator(timeFormat));
				Element lastSection = null;
				for (Element section: sectionList){
					if (lastSection == null){ //First section in the list
						lastSection = section;
					}
					else{
						try {
							Date currentStart = timeFormat.parse(section.getAttributeValue("startTime"));
							Date lastEnd = timeFormat.parse(lastSection.getAttributeValue("endTime"));
							if (currentStart.getTime() - lastEnd.getTime() < 900000L){ //Difference in time less than 15 minutes
								System.out.println(String.format("Time Conflict:\nRoom: %s \n%s (%s): %s - %s\n%s (%s): %s - %s", 
										section.getAttributeValue("room"),
										((Element) lastSection.getParent()).getAttributeValue("num"),
										lastSection.getAttributeValue("crn"),
										lastSection.getAttributeValue("startTime"),
										lastSection.getAttributeValue("endTime"),
										((Element) section.getParent()).getAttributeValue("num"),
										section.getAttributeValue("crn"),
										section.getAttributeValue("startTime"),
										section.getAttributeValue("endTime")
										));
								System.out.println();
							}
						} catch (ParseException e) {
							System.out.println(e.getMessage());
						}
					}
				}
			}
		} catch (JDOMException e) {
			System.out.println(e.getMessage());
		} catch (IOException e) {
			System.out.println(e.getMessage());
		} catch (SAXException e1) {
			System.out.println(e1.getMessage());
		}

	}
	

}
class sectionComparator implements Comparator<Element>{
	SimpleDateFormat timeFormat = null;
	public sectionComparator(SimpleDateFormat tf){
		this.timeFormat = tf;
	}
	
	@Override
	public int compare(Element section1, Element section2){
		Date section1Date = null;
		Date section2Date = null;
		try {
			section1Date = timeFormat.parse(section1.getAttributeValue("startTime"));
			section2Date = timeFormat.parse(section2.getAttributeValue("startTime"));
		} catch (ParseException e) {
			System.out.println(e.getMessage());
		}
		return section1Date.compareTo(section2Date);
		
	}
}
